/**-------------------------------------------------
 * Prefix and namespacing controls
 -------------------------------------------------*/
/**-------------------------------------------------
 * Fluid sizing scale for spacing & typography.
 -------------------------------------------------*/
/* space & font scale ratio */
/* number of steps in each scale */
/**----------------------------------------------
 * Helper mixins and functions to set things like custom
 * props.
 *----------------------------------------------*/
/**
 * This mixin declares a set of CSS custom properties.
 * The variables passed in $vars will be properly prefixed
 * with the provided prefix value.
 *
 * Usage:
 *
 * @include setProps((
 *      measure: 65ch,
 *      font-family: HelveticaNeue, Helvetica Neue, Helvetica, sans-serif,
 * ));
 *
 * Result:
 * --measure: 65ch,
 * --font-family: "HelveticaNeue", "Helvetica Neue", Helvetica, sans-serif
 *
 */
/**
 * Mixin for overriding the value of a custom prop or setting a single prop.
 */
/**
 * Getter function that retrieves a css custom prop value with prefix.
 */
/** Sets a css class name */
/**----------------------------------------------
 * Utility functions to scale things like mathematical equations.
 *----------------------------------------------*/
/**-------------------------------------------------
 * Controls fluid typographic scale.
 -------------------------------------------------*/
:root {
	--measure:    65ch;
	--space--1:   clamp(0.75rem, calc(0.7210144928rem + 0.1449275362vw), 0.8333333333rem);
	--step--1:    clamp(0.75rem, calc(0.7421534906rem + 0.0392325469vw), 0.7725587145rem);
	--space--2:   clamp(0.5rem, calc(0.4806763285rem + 0.0966183575vw), 0.5555555556rem);
	--step--2:    clamp(0.5rem, calc(0.5078338874rem + -0.0391694368vw), 0.4774775738rem);
	--space--3:   clamp(0.3333333333rem, calc(0.3204508857rem + 0.0644122383vw), 0.3703703704rem);
	--space--4:   clamp(0.2222222222rem, calc(0.2136339238rem + 0.0429414922vw), 0.2469135802rem);
	--space-0:    clamp(1.125rem, calc(1.0815217391rem + 0.2173913043vw), 1.25rem);
	--step-0:     clamp(1.125rem, calc(1.0815217391rem + 0.2173913043vw), 1.25rem);
	--space-1:    clamp(1.6875rem, calc(1.6222826087rem + 0.3260869565vw), 1.875rem);
	--step-1:     clamp(1.6875rem, calc(1.5709782609rem + 0.5826086957vw), 2.0225rem);
	--space-2:    clamp(2.53125rem, calc(2.433423913rem + 0.4891304348vw), 2.8125rem);
	--step-2:     clamp(2.53125rem, calc(2.2734569565rem + 1.2889652174vw), 3.272405rem);
	--space-3:    clamp(3.796875rem, calc(3.6501358696rem + 0.7336956522vw), 4.21875rem);
	--step-3:     clamp(3.796875rem, calc(3.2758745513rem + 2.6050022435vw), 5.29475129rem);
	--step-4:     clamp(5.6953125rem, calc(4.6964968175rem + 4.9940784126vw), 8.5669075872rem);
	--step-5:     clamp(8.54296875rem, calc(6.6931295409rem + 9.2491960454vw), 13.8612564761rem);
	--space-none: 0;
}

* {
	box-sizing: border-box;
}

[data-space='none'] {
	--space: 0;
}

[data-space='-1'] {
	--space: var(--space--1);
}

[data-space='-2'] {
	--space: var(--space--2);
}

[data-space='-3'] {
	--space: var(--space--3);
}

[data-space='-4'] {
	--space: var(--space--4);
}

[data-space='0'] {
	--space: var(--space-0);
}

[data-space='1'] {
	--space: var(--space-1);
}

[data-space='2'] {
	--space: var(--space-2);
}

[data-space='3'] {
	--space: var(--space-3);
}

.space-1 {
	--space: var(--space-1);
}

[data-border='1'] {
	--border: 1rem;
}

[data-border='2'] {
	--border: 2rem;
}

@layer primitives {
	.box {
		--_box-padding:    var(--space, 1rem);
		--_box-border:     var(--border);
		--_box-color:      var(--color-dark);
		--_box-background: var(--color-light);
		padding:           var(--_box-padding);
		border:            var(--_box-border) solid;
		outline:           var(--border) solid transparent;
		outline-offset:    calc(var(--border) * -1);
		color:             var(--_box-color);
		background:        var(--_box-background);
	}
	
	@layer reset {
		.box * {
			--space:  var(--space-0, 1rem);
			--border: invalid;
			color:    inherit;
		}
	}
}

@layer primitives {
	.v-spacer {
		--_stack-flow:   var(--space, 1rem);
		display:         flex;
		flex-direction:  column;
		justify-content: flex-start;
	}
	
	.v-spacer > * + * {
		margin-block-start: var(--_stack-flow);
	}
	
	@layer reset {
		.v-spacer * {
			--space: var(--space-0, 1rem);
		}
	}
}


/* * > *[data-border] {
    border: var(--_box-border) solid;
  } */

/* .border-style-class {
  border: 1rem red solid;
} */
/*
:where( .stack, .box ) {
  --space: var(--space-0, initial);
}
*/


/*# sourceMappingURL=style.css.map */
